#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require("http");
const app = require("../app");
const { matches } = require("z");
const config = require("../config/index");
const clr = require("../helpers/console_color");
const debug = require("debug")("kholine-backend:server");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function checkPort({ port, val }) {
  return matches({ port, val })(
    (x = Object) => (isNaN(x) ? x.val : false),
    (x = Object) => (x.port >= 0 ? x.port : false)
  );
}

function normalizePort(val) {
  const port = parseInt(val, 10);
  return checkPort({ port, val });
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log(`${clr.fg.magenta}Server  : ðŸš€ Listening on ` + bind);
  debug("Listening on " + bind);
}
